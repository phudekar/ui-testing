{"version":3,"sources":["lib/block.ts","lib/position.ts","lib/board.ts","game/Block.tsx","game/Board.tsx","game/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Block","location","mine","_mine","_position","_flagged","_nearbyBombs","_exploded","_revealed","this","neighbors","reduce","prev","cur","mineExploded","nearbyBombs","Position","row","column","_row","_column","max","push","filter","p","Board","rows","columns","_blocks","_minePositions","_flaggedMines","Array","fill","map","_","r","c","length","positions","forEach","pos","position","block","blocks","flagged","unflag","includes","flag","getNeighbors","reveal","b","revealed","BlockComponent","onReveal","toggleFlagged","disabled","className","data-testid","onClick","onContextMenu","e","preventDefault","exploded","BoardComponent","props","state","board","onGameOver","setState","toggleFlag","allMinesFlagged","onGameComplete","i","key","j","React","Component","Game","getBoard","mines","plantMines","getRandomPositions","gameOver","gameComplete","reset","count","Math","floor","random","col","find","ps","index","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5b0cabd.chunk.js","sourcesContent":["import Position from './position';\n\nexport interface RevealResult {\n    mineExploded: boolean,\n    nearbyBombs: number,\n}\n\nclass Block {\n\n    private _mine: boolean;\n    private _position: Position;\n    private _flagged: boolean;\n    private _nearbyBombs: number | undefined;\n    private _exploded: boolean | undefined;\n    private _revealed: boolean;\n\n    constructor(location: Position, mine: boolean = false) {\n        this._mine = mine;\n        this._position = location;\n        this._flagged = false;\n        this._revealed = false;\n    }\n\n    get position(): Position {\n        return this._position;\n    }\n\n    get exploded(): boolean | undefined {\n        return this._exploded;\n    }\n\n    get flagged(): boolean {\n        return this._flagged === true;\n    }\n\n    get nearbyBombs(): number | undefined {\n        return this._nearbyBombs;\n    }\n\n    get revealed(): boolean {\n        return this._revealed === true;\n    }\n\n    reveal(neighbors: Block[]): RevealResult {\n        this._revealed = true;\n        this._exploded = this._mine;\n        this._nearbyBombs = neighbors.reduce(\n            (prev, cur) => cur?._mine ? prev + 1 : prev,\n            0);\n\n        return {\n            mineExploded: this._exploded,\n            nearbyBombs: this._nearbyBombs\n        }\n    }\n\n    flag() {\n        this._flagged = true;\n    }\n\n    unflag() {\n        this._flagged = false;\n    }\n}\n\nexport default Block;","class Position {\n    private _row: number;\n    private _column: number;\n\n    constructor(row: number, column: number) {\n        this._row = row;\n        this._column = column;\n    }\n\n    get row(): number {\n        return this._row;\n    }\n\n    get column(): number {\n        return this._column;\n    }\n\n    getNeighbors(max: Position): Position[] {\n        const neighbors = [];\n        neighbors.push(new Position(this.row - 1, this.column - 1));\n        neighbors.push(new Position(this.row - 1, this.column));\n        neighbors.push(new Position(this.row - 1, this.column + 1));\n        neighbors.push(new Position(this.row, this.column - 1));\n        neighbors.push(new Position(this.row, this.column + 1));\n        neighbors.push(new Position(this.row + 1, this.column - 1));\n        neighbors.push(new Position(this.row + 1, this.column));\n        neighbors.push(new Position(this.row + 1, this.column + 1));\n\n        return neighbors.filter(p => p.row >= 0 && p.column >= 0\n            && p.row <= max.row && p.column <= max.column);\n    }\n}\n\nexport default Position;","import Block, { RevealResult } from \"./block\";\nimport Position from \"./position\";\n\nclass Board {\n    private rows: number;\n    private columns: number;\n    private _blocks: Block[][];\n    private _minePositions: Position[];\n    private _flaggedMines: number;\n\n    constructor(rows: number, columns: number) {\n        this.rows = rows;\n        this.columns = columns;\n        this._minePositions = [];\n        this._flaggedMines = 0;\n        this._blocks = new Array(this.rows).fill(0)\n            .map((_, r) => new Array(this.columns).fill(0)\n                .map((_, c) => new Block(new Position(r, c))));\n    }\n\n    allMinesFlagged(): boolean {\n        // console.log(this._flaggedMines, this._minePositions.length);\n        return this._flaggedMines === this._minePositions.length;\n    }\n\n    get blocks(): Block[][] {\n        return this._blocks;\n    }\n\n    plantMines(positions: Position[]) {\n        this._minePositions = positions;\n        positions.forEach(pos => {\n            this._blocks[pos.row][pos.column] = new Block(pos, true)\n        });\n    }\n\n    toggleFlag(position: Position) {\n        const block = this.blocks[position.row][position.column];\n        if (!block.flagged) {\n            block.flag();\n            if (this._minePositions.includes(block.position)) {\n                this._flaggedMines += 1;\n            }\n        } else {\n            block.unflag();\n            if (this._minePositions.includes(block.position)) {\n                this._flaggedMines -= 1;\n            }\n        }\n    }\n\n    reveal(position: Position): RevealResult {\n        const block = this.blocks[position.row][position.column];\n\n        const neighbors = block.position\n            .getNeighbors(new Position(this.rows - 1, this.columns - 1))\n            .map(pos => this.blocks[pos.row][pos.column]);\n\n        const { mineExploded, nearbyBombs } = block.reveal(neighbors);\n\n        if (mineExploded) {\n            this._minePositions.forEach(pos => {\n                this._blocks[pos.row][pos.column].reveal([]);\n            })\n            return { mineExploded: true, nearbyBombs: -1 };\n        }\n\n        if (nearbyBombs === 0) {\n            neighbors.forEach(b => b && !b.revealed && !b.flagged && this.reveal(b.position));\n        }\n\n        return {\n            mineExploded,\n            nearbyBombs\n        }\n\n    }\n}\n\nexport default Board;","import React from 'react';\nimport Position from '../lib/position';\nimport Block from '../lib/block';\n\nconst BlockComponent = ({ block, onReveal, toggleFlagged, disabled = false }: BlockProps) => {\n    const position: Position = block?.position || {};\n    return (\n        <div className={`block${block?.revealed ? ' revealed' : ''}`}\n            data-testid={`block-${position.row}-${position.column}`}\n            onClick={() => !disabled && onReveal && onReveal()}\n            onContextMenu={e => {\n                e.preventDefault();\n                !disabled && toggleFlagged && toggleFlagged()\n            }}>\n            {\n                block.revealed ? (\n                    block?.exploded ? <div className=\"bomb\" />\n                        : <div className=\"nearby-bombs\">{block.nearbyBombs || ''}</div>\n                ) : (block?.flagged ? <div className=\"flag\" /> : <div className=\"mine\" />)\n            }\n\n        </div>\n    )\n}\n\nexport interface BlockProps {\n    block: Block,\n    onReveal?: Function,\n    toggleFlagged?: Function\n    disabled?: boolean;\n}\n\nexport default BlockComponent;","import React from 'react';\nimport Board from '../lib/board';\nimport Block from '../lib/block';\nimport BlockComponent from './Block';\n\nclass BoardComponent extends React.Component<BoardProps> {\n    state: {\n        board: Board\n    };\n    constructor(props: BoardProps) {\n        super(props);\n        this.state = {\n            board: this.props.board\n        }\n    }\n\n    static getDerivedStateFromProps(props: BoardProps, state: any): any {\n        return { board: props.board };\n    }\n\n    reveal(block: Block) {\n        const { mineExploded } = this.state.board.reveal(block.position)\n        if (mineExploded && this.props.onGameOver) {\n            this.props.onGameOver();\n        }\n        this.setState({ board: this.state.board });\n    }\n\n    toggleFlagged(block: Block) {\n        this.state.board.toggleFlag(block.position);\n        if (this.state.board.allMinesFlagged() && this.props.onGameComplete) {\n            this.props.onGameComplete();\n        }\n        this.setState({ board: this.state.board });\n    }\n\n    render() {\n        return <div data-testid=\"board\" className=\"board\" >\n            {\n                this.state.board?.blocks?.map((row, i) => <div key={'r' + (i + 1)} className=\"row\">{\n                    row.map((block, j) =>\n                        <BlockComponent key={`b-${i + 1}-${j + 1}`} block={block}\n                            disabled={this.props.disabled}\n                            onReveal={() => this.reveal(block)}\n                            toggleFlagged={() => this.toggleFlagged(block)}\n                        />\n                    )}\n                </div>\n                )\n            }\n        </div >\n    }\n}\n\ninterface BoardProps {\n    board: Board,\n    disabled?: boolean,\n    onGameComplete?: Function,\n    onGameOver?: Function\n}\n\nexport default BoardComponent;","import React from 'react';\nimport Board from '../lib/board';\nimport Position from '../lib/position';\nimport BoardComponent from './Board';\n\nclass Game extends React.Component {\n    state: {\n        board: Board,\n        gameOver?: boolean,\n        gameComplete?: boolean\n    }\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            board: this.getBoard(10, 10, 10)\n        }\n    }\n\n    getBoard(rows: number, columns: number, mines: number): Board {\n        const board = new Board(rows, columns)\n        board.plantMines(getRandomPositions(rows, columns, mines));\n        return board;\n    }\n\n    onGameOver() {\n        this.setState({ gameOver: true });\n    }\n\n    onGameComplete() {\n        this.setState({ gameComplete: true });\n    }\n\n    reset() {\n        this.setState({\n            board: this.getBoard(10, 10, 10),\n            gameOver: false,\n            gameComplete: false,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"title\">Minesweeper</div>\n                {\n                    this.state.gameComplete && <div className=\"success\">\n                        Congratulations! You flagged all the mines.\n                        <div>\n                            <button className=\"retry-button\" onClick={() => this.reset()}>\n                                Play Again\n                            </button>\n                        </div>\n                    </div>\n                }\n                <BoardComponent board={this.state.board}\n                    disabled={this.state.gameOver || this.state.gameComplete}\n                    onGameOver={() => this.onGameOver()}\n                    onGameComplete={() => this.onGameComplete()} />\n                {\n                    this.state.gameOver === true && <div className=\"overlay\">\n                        <div className=\"game-over\">\n                            Game Over!\n                        </div>\n                        <button className=\"retry-button\" onClick={() => this.reset()}>\n                            Retry\n                        </button>\n                    </div>\n                }\n\n            </div>\n        )\n    }\n}\n\nexport const getRandomPositions = (rows: number, columns: number, count: number): Position[] => {\n    const positions: Position[] = [];\n    for (let index = 0; index < count; index++) {\n        const row = Math.floor(Math.random() * rows);\n        const col = Math.floor(Math.random() * columns);\n        if (positions.find(ps => ps.row === row && ps.column === col)) {\n            index--;\n        } else {\n            positions.push(new Position(row, col));\n        }\n    }\n    return positions;\n}\n\nexport default Game;","import React from 'react';\nimport Game from './game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}